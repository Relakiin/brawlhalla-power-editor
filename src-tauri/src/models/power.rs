use serde::{Deserialize, Serialize};

//TODO: look into not having a hardcoded struct so that older/newer patches can be loaded without changing the app
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct Power {
    pub power_name: Option<String>,
    pub power_id: Option<String>,
    pub order_id: Option<String>,
    pub dev_notes: Option<String>,
    pub mission_tags: Option<String>,
    pub priority: Option<String>,
    pub cast_sound_event: Option<String>,
    pub hit_sound_event: Option<String>,
    pub item_hit_sound_event: Option<String>,
    pub target_method: Option<String>,
    pub parent_item: Option<String>,
    pub origin_power: Option<String>,
    pub is_air_power: Option<String>,
    pub is_signature: Option<String>,
    pub is_antiair: Option<String>,
    pub sig_mode_swaps_move: Option<String>,
    pub aoe_radius_x: Option<String>,
    pub aoe_radius_y: Option<String>,
    pub center_offset_x: Option<String>,
    pub center_offset_y: Option<String>,
    pub cast_impulse_x: Option<String>,
    pub cast_impulse_y: Option<String>,
    pub fire_impulse_x: Option<String>,
    pub fire_impulse_y: Option<String>,
    pub fire_impulse_max_x: Option<String>,
    pub impulse_max_on_dc_only: Option<String>,
    pub speed_limit: Option<String>,
    pub speed_limit_y: Option<String>,
    pub speed_limit_attack: Option<String>,
    pub speed_limit_backward: Option<String>,
    pub speed_limit_attack_backward: Option<String>,
    pub self_impulse_on_hit: Option<String>,
    pub end_on_hit: Option<String>,
    pub cancel_gravity: Option<String>,
    pub wall_cancel: Option<String>,
    pub allow_move: Option<String>,
    pub allow_recover_move: Option<String>,
    pub allow_jump_during_recover: Option<String>,
    pub allow_leave_ground: Option<String>,
    pub allow_hit_on_zero_damage: Option<String>,
    pub accel_mult: Option<String>,
    pub backward_accel_mult: Option<String>,
    pub turn_off_dampening: Option<String>,
    pub keep_ground_friction: Option<String>,
    pub ignore_ground_restrict: Option<String>,
    pub do_not_bounce_off_no_slide_ceiling: Option<String>,
    pub no_slide_ceiling_buffer: Option<String>,
    pub cast_anim: Option<String>,
    pub hurtbox: Option<String>,
    pub cast_time: Option<String>,
    pub fixed_recover_time: Option<String>,
    pub recover_time: Option<String>,
    pub antigrav_time: Option<String>,
    pub g_cancel_time: Option<String>,
    pub ignore_forced_fall_time: Option<String>,
    pub show_cloud_time: Option<String>,
    pub cooldown_time: Option<String>,
    pub ignore_cd_override: Option<String>,
    pub on_hit_cooldown_time: Option<String>,
    pub shake_time: Option<String>,
    pub disable_shake: Option<String>,
    pub only_shake_once: Option<String>,
    pub shake_all_cams: Option<String>,
    pub fixed_min_charge_time: Option<String>,
    pub min_cancel_time: Option<String>,
    pub lose_invuln_time: Option<String>,
    pub base_damage: Option<String>,
    pub variable_impulse: Option<String>,
    pub fixed_impulse: Option<String>,
    pub minimum_impulse: Option<String>,
    pub post_hit_damage_multiplier: Option<String>,
    pub post_hit_impulse_multiplier: Option<String>,
    pub impulse_offset_x: Option<String>,
    pub impulse_offset_y: Option<String>,
    pub impulse_offset_max_x: Option<String>,
    pub impulse_to_point: Option<String>,
    pub to_point_change_x: Option<String>,
    pub to_point_change_y: Option<String>,
    pub to_point_change_dmg: Option<String>,
    pub lock_to_45_degrees: Option<String>,
    pub downward_force_mult: Option<String>,
    pub mirror_impulse_offset: Option<String>,
    pub mirror_offset_center: Option<String>,
    pub ignore_strength: Option<String>,
    pub accept_input: Option<String>,
    pub held_dir_offsets: Option<String>,
    pub di_max_angle: Option<String>,
    pub impulse_on_heavy: Option<String>,
    pub item_speed_damage: Option<String>,
    pub item_speed_impulse: Option<String>,
    pub item_hit_elasticity: Option<String>,
    pub air_time_mult_only: Option<String>,
    pub is_multihit: Option<String>,
    pub min_time_between_hits: Option<String>,
    pub inherit_already_hit: Option<String>,
    pub interrupt_threshold: Option<String>,
    pub can_damage_everyone: Option<String>,
    pub can_assist: Option<String>,
    pub consumes_weapon: Option<String>,
    pub fixed_stun_time: Option<String>,
    pub hold_hit_ents: Option<String>,
    pub hold_offset_x: Option<String>,
    pub hold_offset_y: Option<String>,
    pub update_held_ents: Option<String>,
    pub destroys_item_on_hit: Option<String>,
    pub grab_interpolate_time: Option<String>,
    pub grab_anim: Option<String>,
    pub grab_anim_speed: Option<String>,
    pub grab_force_update: Option<String>,
    pub uninterruptable: Option<String>,
    pub can_change_direction: Option<String>,
    pub combo_name: Option<String>,
    pub combo_override_if_hit: Option<String>,
    pub combo_override_if_release: Option<String>,
    pub combo_override_if_wall: Option<String>,
    pub combo_override_if_button: Option<String>,
    pub origin_override_if_in_mode: Option<String>,
    pub combo_override_if_dir: Option<String>,
    pub combo_override_if_interrupt: Option<String>,
    pub ignore_button_on_hit: Option<String>,
    pub ignore_button_on_miss: Option<String>,
    pub combo_use_same_target_pos: Option<String>,
    pub use_collision_as_target_pos: Option<String>,
    pub combo_use_target_as_source: Option<String>,
    pub combo_use_same_source_pos: Option<String>,
    pub bg_power_on_fire: Option<String>,
    pub bg_cast_idx: Option<String>,
    pub allow_bg_interrupt: Option<String>,
    pub populate_active_power_hits: Option<String>,
    pub populate_bg_hits: Option<String>,
    pub exhausted_version: Option<String>,
    pub gc_version: Option<String>,
    pub momentum_version: Option<String>,
    pub team_taunt_power: Option<String>,
    pub anim_layer: Option<String>,
    pub fx_layer: Option<String>,
    pub is_world_cast_gfx: Option<String>,
    pub custom_art_cast_gfx: Option<String>,
    pub delay_cast_gfx_to_first_fire: Option<String>,
    pub delay_cast_gfx_clean_up: Option<String>,
    pub cast_anim_source: Option<String>,
    pub do_not_send_sync: Option<String>,
    pub is_throw: Option<String>,
    pub cannot_attack_around_corners: Option<String>,
    pub force_hit_through_soft_plat: Option<String>,
    pub force_face_right: Option<String>,
    pub collision_power_offset_x: Option<String>,
    pub collision_power_offset_y: Option<String>,
    pub cast_gfx_anim_file: Option<String>,
    pub cast_gfx_anim_class: Option<String>,
    pub cast_gfx_anim_scale: Option<String>,
    pub cast_gfx_fire_and_forget: Option<String>,
    pub cast_gfx_move_anim_speed: Option<String>,
    pub cast_gfx_flip_anim: Option<String>,
    pub cast_gfx_tint: Option<String>,
    pub cast_gfx_rotation: Option<String>,
    pub is_world_fire_gfx: Option<String>,
    pub is_attack_fire_gfx: Option<String>,
    pub custom_art_fire_gfx: Option<String>,
    pub fire_anim_source: Option<String>,
    pub fire_gfx_anim_file: Option<String>,
    pub fire_gfx_anim_class: Option<String>,
    pub fire_gfx_anim_scale: Option<String>,
    pub fire_gfx_fire_and_forget: Option<String>,
    pub fire_gfx_move_anim_speed: Option<String>,
    pub fire_gfx_flip_anim: Option<String>,
    pub fire_gfx_tint: Option<String>,
    pub fire_gfx_rotation: Option<String>,
    pub is_world_hit_gfx: Option<String>,
    pub only_once_hit_gfx: Option<String>,
    pub owner_facing_hit_gfx: Option<String>,
    pub play_hit_gfx_behind: Option<String>,
    pub hit_anim_source: Option<String>,
    pub hit_react_anim: Option<String>,
    pub hit_gfx_anim_file: Option<String>,
    pub hit_gfx_anim_class: Option<String>,
    pub hit_gfx_anim_scale: Option<String>,
    pub hit_gfx_fire_and_forget: Option<String>,
    pub hit_gfx_tint: Option<String>,
}

impl Power {
    pub fn from_row(row: &csv::StringRecord) -> Self {
        //TODO: use serialization instead of this
        Power {
            power_name: Self::parse_field(row.get(0)),
            power_id: Self::parse_field(row.get(1)),
            order_id: Self::parse_field(row.get(2)),
            dev_notes: Self::parse_field(row.get(3)),
            mission_tags: Self::parse_field(row.get(4)),
            priority: Self::parse_field(row.get(5)),
            cast_sound_event: Self::parse_field(row.get(6)),
            hit_sound_event: Self::parse_field(row.get(7)),
            item_hit_sound_event: Self::parse_field(row.get(8)),
            target_method: Self::parse_field(row.get(9)),
            parent_item: Self::parse_field(row.get(10)),
            origin_power: Self::parse_field(row.get(11)),
            is_air_power: Self::parse_field(row.get(12)),
            is_signature: Self::parse_field(row.get(13)),
            is_antiair: Self::parse_field(row.get(14)),
            sig_mode_swaps_move: Self::parse_field(row.get(15)),
            aoe_radius_x: Self::parse_field(row.get(16)),
            aoe_radius_y: Self::parse_field(row.get(17)),
            center_offset_x: Self::parse_field(row.get(18)),
            center_offset_y: Self::parse_field(row.get(19)),
            cast_impulse_x: Self::parse_field(row.get(20)),
            cast_impulse_y: Self::parse_field(row.get(21)),
            fire_impulse_x: Self::parse_field(row.get(22)),
            fire_impulse_y: Self::parse_field(row.get(23)),
            fire_impulse_max_x: Self::parse_field(row.get(24)),
            impulse_max_on_dc_only: Self::parse_field(row.get(25)),
            speed_limit: Self::parse_field(row.get(26)),
            speed_limit_y: Self::parse_field(row.get(27)),
            speed_limit_attack: Self::parse_field(row.get(28)),
            speed_limit_backward: Self::parse_field(row.get(29)),
            speed_limit_attack_backward: Self::parse_field(row.get(30)),
            self_impulse_on_hit: Self::parse_field(row.get(31)),
            end_on_hit: Self::parse_field(row.get(32)),
            cancel_gravity: Self::parse_field(row.get(33)),
            wall_cancel: Self::parse_field(row.get(34)),
            allow_move: Self::parse_field(row.get(35)),
            allow_recover_move: Self::parse_field(row.get(36)),
            allow_jump_during_recover: Self::parse_field(row.get(37)),
            allow_leave_ground: Self::parse_field(row.get(38)),
            allow_hit_on_zero_damage: Self::parse_field(row.get(39)),
            accel_mult: Self::parse_field(row.get(40)),
            backward_accel_mult: Self::parse_field(row.get(41)),
            turn_off_dampening: Self::parse_field(row.get(42)),
            keep_ground_friction: Self::parse_field(row.get(43)),
            ignore_ground_restrict: Self::parse_field(row.get(44)),
            do_not_bounce_off_no_slide_ceiling: Self::parse_field(row.get(45)),
            no_slide_ceiling_buffer: Self::parse_field(row.get(46)),
            cast_anim: Self::parse_field(row.get(47)),
            hurtbox: Self::parse_field(row.get(48)),
            cast_time: Self::parse_field(row.get(49)),
            fixed_recover_time: Self::parse_field(row.get(50)),
            recover_time: Self::parse_field(row.get(51)),
            antigrav_time: Self::parse_field(row.get(52)),
            g_cancel_time: Self::parse_field(row.get(53)),
            ignore_forced_fall_time: Self::parse_field(row.get(54)),
            show_cloud_time: Self::parse_field(row.get(55)),
            cooldown_time: Self::parse_field(row.get(56)),
            ignore_cd_override: Self::parse_field(row.get(57)),
            on_hit_cooldown_time: Self::parse_field(row.get(58)),
            shake_time: Self::parse_field(row.get(59)),
            disable_shake: Self::parse_field(row.get(60)),
            only_shake_once: Self::parse_field(row.get(61)),
            shake_all_cams: Self::parse_field(row.get(62)),
            fixed_min_charge_time: Self::parse_field(row.get(63)),
            min_cancel_time: Self::parse_field(row.get(64)),
            lose_invuln_time: Self::parse_field(row.get(65)),
            base_damage: Self::parse_field(row.get(66)),
            variable_impulse: Self::parse_field(row.get(67)),
            fixed_impulse: Self::parse_field(row.get(68)),
            minimum_impulse: Self::parse_field(row.get(69)),
            post_hit_damage_multiplier: Self::parse_field(row.get(70)),
            post_hit_impulse_multiplier: Self::parse_field(row.get(71)),
            impulse_offset_x: Self::parse_field(row.get(72)),
            impulse_offset_y: Self::parse_field(row.get(73)),
            impulse_offset_max_x: Self::parse_field(row.get(74)),
            impulse_to_point: Self::parse_field(row.get(75)),
            to_point_change_x: Self::parse_field(row.get(76)),
            to_point_change_y: Self::parse_field(row.get(77)),
            to_point_change_dmg: Self::parse_field(row.get(78)),
            lock_to_45_degrees: Self::parse_field(row.get(79)),
            downward_force_mult: Self::parse_field(row.get(80)),
            mirror_impulse_offset: Self::parse_field(row.get(81)),
            mirror_offset_center: Self::parse_field(row.get(82)),
            ignore_strength: Self::parse_field(row.get(83)),
            accept_input: Self::parse_field(row.get(84)),
            held_dir_offsets: Self::parse_field(row.get(85)),
            di_max_angle: Self::parse_field(row.get(86)),
            impulse_on_heavy: Self::parse_field(row.get(87)),
            item_speed_damage: Self::parse_field(row.get(88)),
            item_speed_impulse: Self::parse_field(row.get(89)),
            item_hit_elasticity: Self::parse_field(row.get(90)),
            air_time_mult_only: Self::parse_field(row.get(91)),
            is_multihit: Self::parse_field(row.get(92)),
            min_time_between_hits: Self::parse_field(row.get(93)),
            inherit_already_hit: Self::parse_field(row.get(94)),
            interrupt_threshold: Self::parse_field(row.get(95)),
            can_damage_everyone: Self::parse_field(row.get(96)),
            can_assist: Self::parse_field(row.get(97)),
            consumes_weapon: Self::parse_field(row.get(98)),
            fixed_stun_time: Self::parse_field(row.get(99)),
            hold_hit_ents: Self::parse_field(row.get(100)),
            hold_offset_x: Self::parse_field(row.get(101)),
            hold_offset_y: Self::parse_field(row.get(102)),
            update_held_ents: Self::parse_field(row.get(103)),
            destroys_item_on_hit: Self::parse_field(row.get(104)),
            grab_interpolate_time: Self::parse_field(row.get(105)),
            grab_anim: Self::parse_field(row.get(106)),
            grab_anim_speed: Self::parse_field(row.get(107)),
            grab_force_update: Self::parse_field(row.get(108)),
            uninterruptable: Self::parse_field(row.get(109)),
            can_change_direction: Self::parse_field(row.get(110)),
            combo_name: Self::parse_field(row.get(111)),
            combo_override_if_hit: Self::parse_field(row.get(112)),
            combo_override_if_release: Self::parse_field(row.get(113)),
            combo_override_if_wall: Self::parse_field(row.get(114)),
            combo_override_if_button: Self::parse_field(row.get(115)),
            origin_override_if_in_mode: Self::parse_field(row.get(116)),
            combo_override_if_dir: Self::parse_field(row.get(117)),
            combo_override_if_interrupt: Self::parse_field(row.get(118)),
            ignore_button_on_hit: Self::parse_field(row.get(119)),
            ignore_button_on_miss: Self::parse_field(row.get(120)),
            combo_use_same_target_pos: Self::parse_field(row.get(121)),
            use_collision_as_target_pos: Self::parse_field(row.get(122)),
            combo_use_target_as_source: Self::parse_field(row.get(123)),
            combo_use_same_source_pos: Self::parse_field(row.get(124)),
            bg_power_on_fire: Self::parse_field(row.get(125)),
            bg_cast_idx: Self::parse_field(row.get(126)),
            allow_bg_interrupt: Self::parse_field(row.get(127)),
            populate_active_power_hits: Self::parse_field(row.get(128)),
            populate_bg_hits: Self::parse_field(row.get(129)),
            exhausted_version: Self::parse_field(row.get(130)),
            gc_version: Self::parse_field(row.get(131)),
            momentum_version: Self::parse_field(row.get(132)),
            team_taunt_power: Self::parse_field(row.get(133)),
            anim_layer: Self::parse_field(row.get(134)),
            fx_layer: Self::parse_field(row.get(135)),
            is_world_cast_gfx: Self::parse_field(row.get(136)),
            custom_art_cast_gfx: Self::parse_field(row.get(137)),
            delay_cast_gfx_to_first_fire: Self::parse_field(row.get(138)),
            delay_cast_gfx_clean_up: Self::parse_field(row.get(139)),
            cast_anim_source: Self::parse_field(row.get(140)),
            do_not_send_sync: Self::parse_field(row.get(141)),
            is_throw: Self::parse_field(row.get(142)),
            cannot_attack_around_corners: Self::parse_field(row.get(143)),
            force_hit_through_soft_plat: Self::parse_field(row.get(144)),
            force_face_right: Self::parse_field(row.get(145)),
            collision_power_offset_x: Self::parse_field(row.get(146)),
            collision_power_offset_y: Self::parse_field(row.get(147)),
            cast_gfx_anim_file: Self::parse_field(row.get(148)),
            cast_gfx_anim_class: Self::parse_field(row.get(149)),
            cast_gfx_anim_scale: Self::parse_field(row.get(150)),
            cast_gfx_fire_and_forget: Self::parse_field(row.get(151)),
            cast_gfx_move_anim_speed: Self::parse_field(row.get(152)),
            cast_gfx_flip_anim: Self::parse_field(row.get(153)),
            cast_gfx_tint: Self::parse_field(row.get(154)),
            cast_gfx_rotation: Self::parse_field(row.get(155)),
            is_world_fire_gfx: Self::parse_field(row.get(156)),
            is_attack_fire_gfx: Self::parse_field(row.get(157)),
            custom_art_fire_gfx: Self::parse_field(row.get(158)),
            fire_anim_source: Self::parse_field(row.get(159)),
            fire_gfx_anim_file: Self::parse_field(row.get(160)),
            fire_gfx_anim_class: Self::parse_field(row.get(161)),
            fire_gfx_anim_scale: Self::parse_field(row.get(162)),
            fire_gfx_fire_and_forget: Self::parse_field(row.get(163)),
            fire_gfx_move_anim_speed: Self::parse_field(row.get(164)),
            fire_gfx_flip_anim: Self::parse_field(row.get(165)),
            fire_gfx_tint: Self::parse_field(row.get(166)),
            fire_gfx_rotation: Self::parse_field(row.get(167)),
            is_world_hit_gfx: Self::parse_field(row.get(168)),
            only_once_hit_gfx: Self::parse_field(row.get(169)),
            owner_facing_hit_gfx: Self::parse_field(row.get(170)),
            play_hit_gfx_behind: Self::parse_field(row.get(171)),
            hit_anim_source: Self::parse_field(row.get(172)),
            hit_react_anim: Self::parse_field(row.get(173)),
            hit_gfx_anim_file: Self::parse_field(row.get(174)),
            hit_gfx_anim_class: Self::parse_field(row.get(175)),
            hit_gfx_anim_scale: Self::parse_field(row.get(176)),
            hit_gfx_fire_and_forget: Self::parse_field(row.get(177)),
            hit_gfx_tint: Self::parse_field(row.get(178)),
        }
    }

    fn parse_field(field: Option<&str>) -> Option<String> {
        field.and_then(|s| {
            if s.is_empty() {
                None
            } else {
                Some(s.to_string())
            }
        })
    }
}
